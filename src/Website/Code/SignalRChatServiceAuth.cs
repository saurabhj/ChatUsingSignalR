//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IAuthService")]
public interface IAuthService {

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAuthService/RegisterUser", ReplyAction = "http://tempuri.org/IAuthService/RegisterUserResponse")]
    RegisterUserResponse RegisterUser(RegisterUserRequest request);

    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAuthService/RegisterUser", ReplyAction = "http://tempuri.org/IAuthService/RegisterUserResponse")]
    System.Threading.Tasks.Task<RegisterUserResponse> RegisterUserAsync(RegisterUserRequest request);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAuthService/LoginUser", ReplyAction = "http://tempuri.org/IAuthService/LoginUserResponse")]
    bool LoginUser(string email, string password);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAuthService/LoginUser", ReplyAction = "http://tempuri.org/IAuthService/LoginUserResponse")]
    System.Threading.Tasks.Task<bool> LoginUserAsync(string email, string password);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAuthService/GetUsernameFromEmail", ReplyAction = "http://tempuri.org/IAuthService/GetUsernameFromEmailResponse")]
    string GetUsernameFromEmail(string email);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAuthService/GetUsernameFromEmail", ReplyAction = "http://tempuri.org/IAuthService/GetUsernameFromEmailResponse")]
    System.Threading.Tasks.Task<string> GetUsernameFromEmailAsync(string email);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAuthService/ChangePassword", ReplyAction = "http://tempuri.org/IAuthService/ChangePasswordResponse")]
    bool ChangePassword(string email, string newPassword);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAuthService/ChangePassword", ReplyAction = "http://tempuri.org/IAuthService/ChangePasswordResponse")]
    System.Threading.Tasks.Task<bool> ChangePasswordAsync(string email, string newPassword);
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName = "RegisterUser", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
public partial class RegisterUserRequest {

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
    public string username;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
    public string email;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 2)]
    public string password;

    public RegisterUserRequest() {
    }

    public RegisterUserRequest(string username, string email, string password) {
        this.username = username;
        this.email = email;
        this.password = password;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName = "RegisterUserResponse", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
public partial class RegisterUserResponse {

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
    public bool RegisterUserResult;

    [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
    public string errorMessage;

    public RegisterUserResponse() {
    }

    public RegisterUserResponse(bool RegisterUserResult, string errorMessage) {
        this.RegisterUserResult = RegisterUserResult;
        this.errorMessage = errorMessage;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IAuthServiceChannel : IAuthService, System.ServiceModel.IClientChannel {
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class AuthServiceClient : System.ServiceModel.ClientBase<IAuthService>, IAuthService {

    public AuthServiceClient() {
    }

    public AuthServiceClient(string endpointConfigurationName) :
        base(endpointConfigurationName) {
    }

    public AuthServiceClient(string endpointConfigurationName, string remoteAddress) :
        base(endpointConfigurationName, remoteAddress) {
    }

    public AuthServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
        base(endpointConfigurationName, remoteAddress) {
    }

    public AuthServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
        base(binding, remoteAddress) {
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    RegisterUserResponse IAuthService.RegisterUser(RegisterUserRequest request) {
        return base.Channel.RegisterUser(request);
    }

    public bool RegisterUser(string username, string email, string password, out string errorMessage) {
        RegisterUserRequest inValue = new RegisterUserRequest();
        inValue.username = username;
        inValue.email = email;
        inValue.password = password;
        RegisterUserResponse retVal = ((IAuthService)(this)).RegisterUser(inValue);
        errorMessage = retVal.errorMessage;
        return retVal.RegisterUserResult;
    }

    public System.Threading.Tasks.Task<RegisterUserResponse> RegisterUserAsync(RegisterUserRequest request) {
        return base.Channel.RegisterUserAsync(request);
    }

    public bool LoginUser(string email, string password) {
        return base.Channel.LoginUser(email, password);
    }

    public System.Threading.Tasks.Task<bool> LoginUserAsync(string email, string password) {
        return base.Channel.LoginUserAsync(email, password);
    }

    public string GetUsernameFromEmail(string email) {
        return base.Channel.GetUsernameFromEmail(email);
    }

    public System.Threading.Tasks.Task<string> GetUsernameFromEmailAsync(string email) {
        return base.Channel.GetUsernameFromEmailAsync(email);
    }

    public bool ChangePassword(string email, string newPassword) {
        return base.Channel.ChangePassword(email, newPassword);
    }

    public System.Threading.Tasks.Task<bool> ChangePasswordAsync(string email, string newPassword) {
        return base.Channel.ChangePasswordAsync(email, newPassword);
    }
}
